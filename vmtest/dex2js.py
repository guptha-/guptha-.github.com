#!/usr/bin/env python

import os,sys
import base64

# Version 2.0
# reads a file as binary, and outputs the bytes as an array in base64
# not the most space efficient, but the easiest
if __name__ == '__main__':
  if len(sys.argv) != 2:
    print("usage: dex2js.py dex_file_name");

  input_file = sys.argv[1]

  file_name = os.path.basename(input_file);
  
  filedata = '';
  with open(input_file, 'rb') as fp:
    filedata = fp.read()

  if not filedata:
    print('No data given to tool')
    sys.exit(-1);

  result = '';
  result += '// atob creates an array from a string of binary data\n'
  result += '// then split turns it into an array\n'
  
  result += 'files["%s"] = ' % file_name
  # for making worselib.dex
  #result += 'var JavaLibraryDex = '
  result += 'binaryStringToArray(window.atob("%s"));\n' % (base64.b64encode(filedata))

  result += 'assert( isArray(JavaLibraryDex), "Autogenerated assert for ' + file_name + ' existing");\n';

  i = 0

  #output to a file
  with open(file_name+'.js', 'w') as fp:
   fp.write(result)


